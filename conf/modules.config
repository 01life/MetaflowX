/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    
    //publishDir = [
    //    path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
    //    mode: params.publish_dir_mode,
    //    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //]

    //withName: METASPADES {
    //    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    //}


    /*
    ******************** QC Module ********************
    */
    withName: FASTP {
        publishDir = [
            [
                path: {"${params.outdir}/01.CleanData/${id}"},
                pattern: "*.gz",
                mode: "symlink",
                failOnError: true
            ],
            [
                path: {"${params.outdir}/01.CleanData/${id}"},
                pattern: "*_fastp*",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/01.CleanData/${id}"},
                pattern: "*.md5",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }    

    withName: TRIM {
        publishDir = [
            [
                path: {"${params.outdir}/01.CleanData/${id}"},
                pattern: "*.gz",
                mode: "symlink",
                failOnError: true
            ],
            [
                path: {"${params.outdir}/01.CleanData/${id}"},
                pattern: "*.md5",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }    

    withName: MERGEQC {
        publishDir = [
            path: {"${params.outdir}/01.CleanData/"},
            mode: params.publish_dir_mode
        ]
    }


    /*
    ******************** Assembly Module ********************
    */
    withName:METASPADES {
        queue  = { params.config_profile_name == 'slurm' ? 'md' : 'data' }
        queue = {   
            if (params.config_profile_name == 'slurm') {  
                task.attempt == 2 ? 'md_big' : 'md'   
            } else {  
                task.attempt == 2 ? 'data_big' : 'data'  
            }  
        }  
        errorStrategy = { 
            //occur exception and exit
        	if(task.exitStatus != 0){
                //If an exception occurs on the first run, then retry
	    		if(task.attempt == 1) 'retry'
                ///If thereâ€™s an exception during the second run, then ignore it
			    else if(task.attempt == 2) 'ignore'
			    else 'finish'
		    }
        }
        maxRetries = 1

        publishDir = [
            path: {"${params.outdir}/02.Contig/MetaSPAdes/${id}"},
            mode: params.publish_dir_mode
        ]
    }

    withName:METASPADESM64 {
        //queue  = { params.config_profile_name == 'slurm' ? 'md' : 'data' }
        publishDir = [
            path: {"${params.outdir}/02.Contig/MetaSPAdes/${id}"},
            mode: params.publish_dir_mode
        ]
    }

    withName:METASPADESM128 {
        cpus   = { check_max( 40                   , 'cpus'    ) }
        memory = { check_max( 145.GB               , 'memory'  ) }
        time   = { check_max( 72.h                 , 'time'    ) }
        //queue  = { params.config_profile_name == 'slurm' ? 'md_big' : 'data_big' }
        publishDir = [
            path: {"${params.outdir}/02.Contig/MetaSPAdes/${id}"},
            mode: params.publish_dir_mode
        ]
    }

    withName: MEGAHIT {
        publishDir = [
            path: {"${params.outdir}/02.Contig/Megahit/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: METAQUAST {
        publishDir = [
            path: {"${params.outdir}/02.Contig/MetaQUAST/"},
            mode: params.publish_dir_mode
        ]
    }  

    withName: MERGEQUAST {
        publishDir = [
            path: {"${params.outdir}/02.Contig"},
            mode: params.publish_dir_mode
        ]
    }

    withName: CONTIGSTAT {
        publishDir = [
            path: {"${params.outdir}/02.Contig"},
            mode: params.publish_dir_mode
        ]
    }

    /*
    ******************** contig taxonomy Module ********************
    */

    // withName: KRKEN2CONTIGTAXO {
    //     publishDir = [
    //         path: {"${params.outdir}/02.Contig/contig_taxonomy/Kraken2/${id}"},
    //         mode: params.publish_dir_mode
    //     ]
    // }  


    // withName: CATCONTIG {
    //     //conda = "/share/app/miniconda3/"
    //     publishDir = [
    //         path: {"${params.outdir}/02.Contig/contig_taxonomy/CAT/${id}"},
    //         mode: params.publish_dir_mode
    //     ]
    // }  

//    withName: TAXOMETER {
//        //conda = "/share/app/miniconda3/envs/vamb"
//        publishDir = [
//            path: {"${params.outdir}/02.Contig/contig_taxonomy/Taxometer/${id}"},
//            mode: params.publish_dir_mode
//        ]
//    }  

    // withName: TAXOMETERFILTER {
    //     publishDir = [
    //         path: {"${params.outdir}/02.Contig/contig_taxonomy/Taxometer/${id}"},
    //         mode: params.publish_dir_mode
    //     ]
    // }  



    /*
    ******************** Marker Module ********************
    */
    withName: METAPHLANV40 {
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/eachSample/${id}"},
            enabled: params.save_metaphlan_output,
            mode: params.publish_dir_mode
        ]
    }    

    withName: METAPHLANV41 {
        //conda = "/share/app/miniconda3/envs/mpa4"
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/eachSample/${id}"},
            enabled: params.save_metaphlan_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEMPA {
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: SBG2GTDB {
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/eachSample/${id}"},
            mode: params.publish_dir_mode
        ] 
    }

    withName: MPAEXTRAABUN4MPA {
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/eachSample/${id}"},
            enabled: params.save_metaphlan_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEMPAEXTRAABUN {
        publishDir = [
            path: {"${params.outdir}/101.MetaPhlAn/"},
            mode: params.publish_dir_mode
        ] 
    }

    withName: KRAKEN2 {
        publishDir = [
            path: {"${params.outdir}/101.Kraken2/eachSample/${id}"},
            enabled: params.save_kraken2_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEKRAKEN2 {
        publishDir = [
            path: {"${params.outdir}/101.Kraken2"},
            mode: params.publish_dir_mode
        ] 
    }

    withName: HUMANNV3 {
        publishDir = [
            path: {"${params.outdir}/102.HUMAnN/eachSample"},
            enabled: params.save_humann_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: HUMANNV4 {
        //conda = "/share/app/miniconda3/envs/mpa4"
        publishDir = [
            path: {"${params.outdir}/102.HUMAnN/eachSample"},
            enabled: params.save_humann_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEHUMANN {
        publishDir = [
            path: {"${params.outdir}/102.HUMAnN/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: HUMANNEXPAND {
        publishDir = [
            path: {"${params.outdir}/102.HUMAnN/eachSample/${id}"},
            enabled: params.save_humann_output,
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEHUMANNEXPAND {
        publishDir = [
            path: {"${params.outdir}/102.HUMAnN/"},
            mode: params.publish_dir_mode
        ]
    }


    /*
    ******************** Geneset Module ********************
    */
    withName: CONTIGFILTER {
        publishDir = [
            path: {"${params.outdir}/02.Contig/${id}"},
            pattern: "*_contig*",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }
    
    withName: PRODIGAL {
        publishDir = [
            path: {"${params.outdir}/03.Geneset/030.Prodigal/${id}"},
            mode: params.publish_dir_mode
        ]
    }

    withName: GENEFILTERSTAT {
        publishDir = [
            path: {"${params.outdir}/03.Geneset/030.Prodigal/${id}"},
            pattern: "*gene*.xls",
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEGENEINFO {
        publishDir = [
            path: {"${params.outdir}/03.Geneset"},
            pattern: "geneset_sampleStat_report",
            mode: params.publish_dir_mode
        ]
    }

    withName: SINGLECDHIT {
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/031.UniqueGeneFasta"},
                pattern: "${params.pipeline_prefix}_geneset*",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/03.Geneset"},
                pattern: "geneset_Gene_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }
    
    withName: MULTICDHIT {
        executor = 'local'
        cpus = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 8.GB               , 'memory'  ) }
        errorStrategy = 'terminate'
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/031.UniqueGeneFasta"},
                pattern: "${params.pipeline_prefix}_geneset*",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/03.Geneset"},
                pattern: "geneset_Gene_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: EGGNOG {
        queue = { params.config_profile_name == 'slurm' ? 'md_db' : 'data_db' }
        scratch = true
    }

    withName: BOWTIE2GENE {
        publishDir = [
            path: {"${params.outdir}/04.GenesetProfile/eachSample/${id}"},
            mode: params.publish_dir_mode,
            enabled: params.save_geneset_abundance
        ]
    }

    withName: MERGEGENEPROFILE {
        publishDir = [
            path: {"${params.outdir}/04.GenesetProfile"},
            pattern: "genesetAbundance_report",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: GENEPROFILE {
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/032.Annotation"},
                pattern: "${params.pipeline_prefix}*annotation.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "${params.pipeline_prefix}*abundance.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "genesetFunction_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: ANTISMASH {
        //conda = "/share/app/miniconda3/envs/antismash"
        publishDir = [
                path: {"${params.outdir}/03.Geneset/032.Annotation/antiSMash/"},
                pattern: "*.zip",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
    }

    withName: BIGMAP {
        //conda = "/share/app/miniconda3/envs/BiG-MAP_process"
        publishDir = [
            path: {"${params.outdir}/04.GenesetProfile/eachSample/${id}/BiG-MAP"},
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }
    
    withName: RGI {
        //conda = "/share/app/miniconda3/envs/rgi"
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/032.Annotation"},
                pattern: "${params.pipeline_prefix}*annotation.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "${params.pipeline_prefix}*abundance.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "rgi_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: CUSTOMNTDB {
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/032.Annotation"},
                pattern: "${params.pipeline_prefix}*annotation.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "${params.pipeline_prefix}*abundance.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "customnt_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: CUSTOMPRODB {
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/032.Annotation"},
                pattern: "${params.pipeline_prefix}*annotation.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "${params.pipeline_prefix}*abundance.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "customnt_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: VFDB {
        publishDir = [
            [
                path: {"${params.outdir}/03.Geneset/032.Annotation"},
                pattern: "${params.pipeline_prefix}*annotation.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "${params.pipeline_prefix}*abundance.xls",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/04.GenesetProfile"},
                pattern: "vfdb_report",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: MERGEBGCPROFILE {
        publishDir = [
            path: {"${params.outdir}/04.GenesetProfile/"},
            mode: params.publish_dir_mode
        ]
    }

    /*
    ******************** Binner Module ********************
    */
    withName: METABINNER {
        //conda = "/share/app/miniconda3/envs/metabinner_env"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*.contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: BINNY {
        //conda = "/share/app/miniconda3"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: COMEBIN {
        //conda = "/share/app/miniconda3/envs/comebin_env"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*.contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: CONCOCT {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*.contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: MAXBIN2 {   
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: SEMIBIN2 {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: METABAT2 {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: VAMBBIN {
        //conda = "/share/app/miniconda3/envs/vamb"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: METADECODER {
        //conda = "/share/app/miniconda3/envs/metadecoder"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*contigs2bin.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }


    // withName: TAXOMETER2BIN {
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/Taxometer/${id}"},
    //         mode: params.publish_dir_mode,
    //         pattern: "tomoma*tsv",
    //         failOnError: true
    //     ]
    // }

    // withName: TAXVAMB {
    //     //conda = "/share/app/miniconda3/envs/vamb"
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
    //         pattern: "*contigs2bin.tsv",
    //         mode: params.publish_dir_mode
    //     ]
    // }  

    withName: SELECTPERMUTATION {
        publishDir = [
            [
                path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
                pattern: "PermutationBest.contigs2bin.tsv",
                mode: params.publish_dir_mode,
                failOnError: true
            ],
            [
                path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
                pattern: "*_PBO_quality_report.tsv",
                mode: params.publish_dir_mode,
                failOnError: true
            ]
        ]
    }

    withName: DASTOOL {
        //conda = "/share/app/miniconda3/envs/metaflowX"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/DASTool"},
            pattern: "*.tsv",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: MAGSCOT {
        //conda = "/share/app/miniconda3/envs/MAGScoT_env"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/MAGScoT"},
            pattern: "*.out",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }


    withName: CHECKM2 {
        //conda = "/share/app/miniconda3/envs/checkm2"
        //queue = { params.config_profile_name == 'slurm' ? 'md_db' : 'data_db' }
        scratch = true
        maxForks = 30 
    }

    withName: MULTICHECKM2 {
        //conda = "/share/app/miniconda3/envs/checkm2"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/"},
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: SBORENAMECHECKM2 {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/"},
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }
    withName: PBORENAMECHECKM2 {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/"},
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: QUAST_SAMPLE_BINS {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/"},
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: PREBINNING {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}"},
            pattern: "*_contig_*.txt",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: POSTBINNING {
        publishDir = [
            path: {"${params.outdir}/05.BinSet"},
            mode: params.publish_dir_mode
        ] 
    }

//    withName: PICKPBODBO {
//        publishDir = [
//            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample"},
//            mode: params.publish_dir_mode
//        ]
//        errorStrategy = { 
//            //occur exception and exit
//        	if(task.exitStatus != 0){
//                //If an exception occurs on the first run, then retry
//	    		if(task.attempt == 1) 'retry'
//                ///If thereâ€™s an exception during the second run, then ignore it
//			    else 'ignore'
//		    }
//       }
//    }  

    withName: RENAMEBEXTBIN {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/"},
            mode: params.publish_dir_mode
        ]
        errorStrategy = { 
            //occur exception and exit
        	if(task.exitStatus != 0){
                //If an exception occurs on the first run, then retry
	    		if(task.attempt == 1) 'retry'
                ///If thereâ€™s an exception during the second run, then ignore it
			    else 'ignore'
		    }
        }
    } 




    withName: GALAHMULTIBIN {
        //conda = "/share/app/miniconda3/envs/galah"
        //publishDir = [
        //    path: {"${params.outdir}/05.BinSet/050.HQRawBin/eachSample/${id}/PBO/"},
        //    mode: params.publish_dir_mode
        //]
        errorStrategy = { 
            //occur exception and exit
        	if(task.exitStatus != 0){
                //If an exception occurs on the first run, then retry
	    		if(task.attempt == 1) 'retry'
                ///If thereâ€™s an exception during the second run, then ignore it
			    else 'ignore'
		    }
        }
    }  

    withName: DREP {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/051.UniqueBin"},
            pattern: "${params.pipeline_prefix}_dRep_cluster.xls",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: GALAH {
        //conda = "/share/app/miniconda3/envs/galah"
        publishDir = [
            path: {"${params.outdir}/05.BinSet/051.UniqueBin/Galah"},
            pattern: "*fa",
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: RENAMEBIN {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/051.UniqueBin"}, 
            saveAs: {filename -> {
                if ( filename.contains(".txt")) {
                    return null;
                }
                return filename;
                }
            },
            mode: params.publish_dir_mode
        ]
    }

    withName: NOBINSWARNING {
        publishDir = [
            path: {"${params.outdir}/"},
            mode: params.publish_dir_mode
        ]
    }

    /*
    ******************** BinAbundance Module ********************
    */
    withName: BOWTIE2BIN {
        publishDir = [
            path: {"${params.outdir}/06.BinsetProfile/060.Bowtie2/${id}/"},
            saveAs: {filename -> {
                    if ( filename.contains(".bam")) {
                        return null;
                    }
                    return filename;
                }
            },
            mode: params.publish_dir_mode,
            failOnError: true
        ]
    }

    withName: COVERM {
        publishDir = [
            path: {"${params.outdir}/06.BinsetProfile/061.BinAbundance/"},
            mode: params.publish_dir_mode
        ]
    }

    
    /*
    ******************** BinFunction Module ********************
    */
    withName: BINFUNCTIONGENEID {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/052.Annotation/eachBinFunction"},
            mode: params.publish_dir_mode
        ]
    }
    
    withName: BINSPECIFIEDFUNCTION {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/052.Annotation/eachBinFunction"},
            mode: params.publish_dir_mode
        ]
    }   

    
    /*
    ******************** BinTaxonomy Module ********************
    */
    withName: GTDB {
        //conda = "/share/app/miniconda3/envs/gtdbtk_v240"
        errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'terminate' : 'retry' }
        maxRetries     = 1 
        queue = { params.config_profile_name == 'slurm' ? 'md_db' : 'data_db' }
        scratch = true
        publishDir = [
            path: {"${params.outdir}/05.BinSet/052.Annotation/GTDB/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEGTDB {
        publishDir = [
            path: {"${params.outdir}/05.BinSet/052.Annotation/GTDB/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: GTDBWARNING {
        publishDir = [
            path: {"${params.outdir}/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGEBINABUNTAXON {
        publishDir = [
            path: {"${params.outdir}/06.BinsetProfile/062.TaxonomyAbundance/"},
            mode: params.publish_dir_mode
        ]
    }


    /*
    ******************** BinReassembly Module ********************
    */
    withName: BRACONTIGFILTER {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/00.ReAss_bins/${id}"},
            pattern: "*_reassembly_contigs*",
            mode: "copy",
            failOnError: true
        ]
    }
    
    withName: REBINASSEMBLY {
        queue = {   
            if (params.config_profile_name == 'slurm') {  
                task.attempt == 2 ? 'md_big' : 'md'   
            } else {  
                task.attempt == 2 ? 'data_big' : 'data'  
            }  
        }  
        errorStrategy = { 
            //occur exception and exit
        	if(task.exitStatus != 0){
                //If an exception occurs on the first run, then retry
	    		if(task.attempt == 1) 'retry'
                ///If thereâ€™s an exception during the second run, then ignore it
			    else if(task.attempt == 2) 'ignore'
			    else 'finish'
		    }
        }
        maxRetries = 1
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/00.ReAss_bins/"},
            mode:'copy'
        ]
    }

    withName: EXTRACTREADSMASHSAMPLE {
    	publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/00.ReAss_bins/bwa_mash_reads/"},
            mode: "copy",
            failOnError: true
        ]
    }

    withName: GETBINSAMPLE {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/080.Pick4OptimazeInfo/"},
            pattern: "${params.pipeline_prefix}_pick4optimize_bin_sample.txt",
            mode: "copy",
            failOnError: true
        ]
    }

    withName: BRAMEGAHIT {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/00.ReAss_bins/"},
            mode:'copy'
        ]
    }

    //withName: BRADASTOOL {
        //conda = "/share/app/miniconda3/envs/metaflowX"
    //}

    withName: MERGEREBINCHECKM2 {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
            pattern: "ReAss_ReBin*txt",
            mode: "copy",
            failOnError: true
        ]
    }

    withName: BRADASTOOL_WARNING {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
            mode: "copy",
            failOnError: true
        ]
    }

    withName: ASS_CHECKM2_WARNING {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
            mode: "copy",
            failOnError: true
        ]
    }

    withName: R2_CHECKM2_WARNING {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
            mode: "copy",
            failOnError: true
        ]
    }

    withName: MERGEREBINUNIMPROVEBIN {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
            pattern: "ReAss_ReBin*txt",
            mode: "copy",
            failOnError: true
        ]
    }

    withName: PICKREREFINE {
        publishDir = [
            [
                path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/03.ReAss_ReBin_ReRedine_HQ/"},
                pattern: "ReAss_ReBin_ReRefine*.fa",
                mode: "copy",
                failOnError: true
            ],
            [
                path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
                pattern: "ReAss_ReBin_ReRefine_*.txt",
                mode: "copy",
                failOnError: true
            ]
        ]
    }

    withName: OUTHQBIN {
        publishDir = [
            [
                path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
                pattern: "01.ReAss_HQ/*fa",
                mode: "copy",
                failOnError: true
            ],
            [
                path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/"},
                pattern: "ReAss_*.txt",
                mode: "copy",
                failOnError: true
            ]
        ]
    }

    withName: PICKREBIN {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly/02.ReAss_ReBin_HQ/"},
            pattern: "ReAss_ReBin_HQ_*.fa",
            mode: "copy",
            failOnError: true
        ]
    }
    
    //withName: DEEPURIFYREBIN {
        //conda = "/share/app/miniconda3/envs/Deepurify2"
    //}

    withName: REBINVERIFY {
        publishDir = [
            path: {"${params.outdir}/08.BinOptimization/082.BinReassembly"},
            pattern: "Bins_Reassembly_Optimization_*.xls",
            mode: "copy",
            failOnError: true
        ]
    }


    /*
    ******************** SVflowInput Module ********************
    */
    // withName: GETGCANDDEPTH {
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/051.UniqueBin"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    // withName: BUILDTREE {
    //     //conda = "/share/app/miniconda3/envs/gtdbtk_v240"
    //     queue = { params.config_profile_name == 'slurm' ? 'md_db' : 'data_db' }
    //     scratch = true
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/052.Annotation/GTDB/"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    // withName: COVERMRELABUNST {
    //     publishDir = [
    //         path: {"${params.outdir}/06.BinsetProfile/061.BinAbundance/"},
    //         mode: params.publish_dir_mode
    //     ] 
    // }

    // withName: GETBINSTAXON {
    //     publishDir = [
    //         path: {"${params.outdir}/06.BinsetProfile/062.TaxonomyAbundance/"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    // withName: GETBINSINFO {
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/051.UniqueBin"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    // withName: MERGETREE {
    //     publishDir = [
    //         path: {"${params.outdir}/05.BinSet/052.Annotation/GTDB/"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    // withName: GETSVFLOWINPUT {
    //     publishDir = [
    //         path: {"${params.outdir}/SVFlowInput"},
    //         mode: params.publish_dir_mode
    //     ]
    // }

    
    /*
    ******************** Polish Module ********************
    */
    withName: REPORT {
        publishDir = [
            path: {"${params.outdir}/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: POSTPIPELINE {
        publishDir = [
            path: {"${params.outdir}/01.CleanData"},
            mode: params.publish_dir_mode
        ]
    }

    withName: MULTIQCFASTP {
        publishDir = [
            path: {"${params.outdir}/07.MultiQC/${type}"},
            mode: params.publish_dir_mode
        ]
    }

    withName: MULTIQCBOWTIE2 {
        publishDir = [
            path: {"${params.outdir}/07.MultiQC/${type}"},
            mode: params.publish_dir_mode
        ]
    }

    withName: "PIPELINEERROR*" {
        cache = false
        executor = 'local'
        publishDir = [
            path: {"${params.outdir}/"},
            mode: params.publish_dir_mode,
        ]
    }

    withName: "MERGECHECKLOG" {
        executor = 'local'
    }

    withName: PIPELINEWARNING {
        publishDir = [
            path: {"${params.outdir}/"},
            mode: params.publish_dir_mode
        ]
    }

    withName: "NOTIFICATION*" {
        cache = false
        executor = 'local'
    }


    // Minitools

    //withName: MULTIDASTOOL {
        //conda = "/share/app/miniconda3/envs/metaflowX"
    //}

    withName: ZIPDASTOOLRES {
        publishDir = [
            path: {"${params.outdir}/BestBinnerSelector"},
            mode: params.publish_dir_mode
        ]
    }

    withName: SUMMARYRESULT {
        //conda = "/share/app/miniconda3/envs/metaflowX"
        publishDir = [
            path: {"${params.outdir}/BestBinnerSelector"},
            mode: params.publish_dir_mode
        ]
    }

    //withName: DEEPURIFYCLEAN {
    //    //conda = "/share/app/miniconda3/envs/Deepurify2"
    //}


}
