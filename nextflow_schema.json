{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/metassembly/master/nextflow_schema.json",
    "title": "nf-core/metassembly pipeline parameters",
    "description": "this is a pipleline for metagenomics assembly",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data",
            "required": [
                "input",
                "outdir"
            ],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/metassembly/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Output directory where the results will be saved",
                    "fa_icon": "fas fa-folder-open",
                    "help_text": "You have to use absolute paths to storage on Cloud infrastructure."
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "Account": {
                    "type": "string",
                    "fa_icon": "fab fa-adn",
                    "description": "Slurm account",
                    "help_text": "you must input slurm account, otherwise it will come to error."
                },
                "mode": {
                    "type": "integer",
                    "fa_icon": "fas fa-bars",
                    "description": "The mode to run this pipeline, the choices enabled are: 0,1,2,3,4,5",
                    "default": 0,
                    "help_text": "The mode parameter is used to specify the analysis module to execute:\n1 run QC;\n2 run ASSEMBLY;\n3 run RAPID_TAXONOMIC_PROFILING;\n4 run GENESET;\n5 run BINNING;\nother run whole workflow.",
                    "minimum": 0,
                    "maximum": 5
                },
                "pipeline_prefix": {
                    "type": "string",
                    "default": "MetaflowX",
                    "description": "Name of the pipeline",
                    "fa_icon": "fas fa-file-signature"
                },
                "function": {
                    "type": "string",
                    "default": "mag",
                    "description": "Function of the pipeline, the choices enabled are: mag, bbs, bra",
                    "help_text": "{mag, bbs, bra, test}\nChoose to perform a metagenome analysis workflow or execute mini tools.",
                    "enum": [
                        "mag",
                        "bbs",
                        "bra",
                        "test"
                    ],
                    "fa_icon": "fas fa-magnet"
                },
                "single_end": {
                    "type": "boolean",
                    "fa_icon": "fab fa-adn",
                    "description": "Specifies that the input is single-end reads.",
                    "help_text": "By default, the pipeline expects paired-end data. If you have single-end data, you need to specify `--single_end` on the command line when you launch the pipeline. "
                },
                "remove_temp_sam_bam": {
                    "type": "boolean",
                    "fa_icon": "fab fa-adn",
                    "description": "Remove the temporary sam and bam files",
                    "help_text": "Remove the temporary sam and bam files."
                },
                "pipeline_assets": {
                    "type": "string",
                    "description": "Assets path of project"
                },
                "webhookurl": {
                    "type": "string",
                    "description": "The Webhook Address for the Enterprise WeChat Group Robot",
                    "default": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=ee63c501-631a-4af7-bc04-c6ab1223a6e4"
                }
            }
        },
        "qc_options": {
            "title": "QC options",
            "type": "object",
            "description": "Parameters of QC module",
            "default": "",
            "properties": {
                "skip_qc": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip QC module"
                },
                "qc_tool": {
                    "type": "string",
                    "default": "fastp",
                    "description": "Select the data quality control tool to use, the choices enabled are: fastp,trimmomatic",
                    "enum": [
                        "fastp",
                        "trimmomatic"
                    ],
                    "fa_icon": "fas fa-tools"
                },
                "adapters": {
                    "type": "string",
                    "description": "Adapter file for trim",
                    "fa_icon": "fas fa-file-alt",
                    "format": "file-path"
                },
                "fastp_options": {
                    "type": "string",
                    "default": "--cut_front --cut_front_window_size 1 --cut_front_mean_quality 5 --cut_tail --cut_tail_window_size 1 --cut_tail_mean_quality 5 --cut_right --cut_right_mean_quality 15 --length_required 50 --detect_adapter_for_pe",
                    "description": "Options for fastp",
                    "fa_icon": "fas fa-filter"
                },
                "qc_bowtie2_options": {
                    "type": "string",
                    "default": "--very-sensitive --no-head --no-sq --reorder",
                    "description": "Options for Bowtie 2 to remove host",
                    "fa_icon": "fas fa-filter"
                },
                "trim_ILLUMINACLIP_options": {
                    "type": "string",
                    "default": "2:30:10",
                    "description": "ILUMINACLIP configuration of trimmomatic"
                },
                "trim_options": {
                    "type": "string",
                    "default": "LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:75 -phred33",
                    "description": "Options for trimmomatic",
                    "fa_icon": "fas fa-filter"
                },
                "host_db": {
                    "type": "string",
                    "description": "Index filename prefix of host database (minus trailing .X.bt2)",
                    "help_text": "Human genome reference database  for removing host(default: hg38)\nDownload link: http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz",
                    "fa_icon": "fas fa-database",
                    "format": "directory-path"
                },
                "host_db_index": {
                    "type": "string",
                    "default": "hg38.index",
                    "description": "Index filename prefix (minus trailing .X.bt2).",
                    "fa_icon": "fab fa-slack-hash"
                },
                "phix_db": {
                    "type": "string",
                    "description": "Bowtie2 index directory for PhiX reference genome"
                },
                "phix_db_index": {
                    "type": "string",
                    "default": "GCA_002596845.1_ASM259684v1_genomic.index",
                    "description": "Filename of PhiX genomic index file"
                }
            },
            "fa_icon": "fas fa-broom",
            "help_text": ""
        },
        "assembly_options": {
            "title": "Assembly options",
            "type": "object",
            "description": "Parameters of assembly module",
            "default": "",
            "properties": {
                "assembly_tool": {
                    "type": "string",
                    "default": "metaspades",
                    "description": "Select the assembly tool to use, the choices enabled are: metaspades,megahit",
                    "enum": [
                        "metaspades",
                        "megahit"
                    ],
                    "fa_icon": "fas fa-tools"
                },
                "min_contig_len": {
                    "type": "integer",
                    "default": 2000,
                    "description": "Minimum length of contigs to output",
                    "fa_icon": "fas fa-align-justify"
                },
                "metaspades_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for metaSPAdes",
                    "default": "--meta"
                },
                "spades4downstream_analysis": {
                    "type": "string",
                    "default": "scaffolds",
                    "description": "Specify whether to use contigs or scaffolds assembled by SPAdes, the choices enabled are: scaffolds,contigs",
                    "help_text": "Be default the SPAdes documentation recommends using scaffolds rather than contigs, as these are longer as they combine multiple contigs. However there is an increased risk of misassemblies or chimeras. Use this flag to specify to just use contigs for downstream processes such as binning. Reference by nf-mag.",
                    "enum": [
                        "scaffolds",
                        "contigs"
                    ],
                    "fa_icon": "fas fa-tools"
                },
                "megahit_options": {
                    "type": "string",
                    "default": "--min-contig-len 2000",
                    "description": "Options for MEGAHIT",
                    "fa_icon": "fas fa-filter"
                },
                "metaquast_options": {
                    "type": "string",
                    "default": "--rna-finding --max-ref-number 0",
                    "description": "Options for MetaQuast"
                },
                "contig_taxonomy": {
                    "type": "boolean",
                    "description": "Performs taxonomic classification of contigs"
                },
                "kraken2_contig": {
                    "type": "boolean",
                    "description": "Run Kraken2 for contig classification"
                },
                "kraken2_contig_anno_options": {
                    "type": "string",
                    "description": "Custom Kraken2 parameters for contig classification"
                },
                "contig_taxonomy_output": {
                    "type": "string",
                    "description": "The results of contig taxonomy"
                },
                "cat_contig": {
                    "type": "boolean",
                    "default": true,
                    "description": "Executes CAT tool for contig annotation"
                },
                "cat_contig_options": {
                    "type": "string",
                    "description": "Custom CAT annotation parameters"
                },
                "cat_gtdb_db": {
                    "type": "string",
                    "description": "GTDB reference database directory for CAT"
                },
                "cat_pack": {
                    "type": "string",
                    "description": "Installation path of CAT software package"
                }
            },
            "fa_icon": "fas fa-align-left"
        },
        "marker_options": {
            "title": "Marker options",
            "type": "object",
            "description": "Parameters of rapid taxonomic profiling module",
            "default": "",
            "properties": {
                "skip_marker": {
                    "type": "boolean",
                    "fa_icon": "fas fa-forward",
                    "description": "Skip Taxonomic classification based on marker genes module"
                },
                "metaphlan": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run MetaPhlAn or not",
                    "fa_icon": "fas fa-record-vinyl"
                },
                "metaphlan_version": {
                    "type": "string",
                    "description": "The version of MetaPhlAn",
                    "default": "4.0",
                    "enum": [
                        "4.0",
                        "4.1"
                    ]
                },
                "mpa_db": {
                    "type": "string",
                    "fa_icon": "far fa-folder-open",
                    "description": "Folder containing the MetaPhlAn database",
                    "help_text": "The folder contain the MetaPhlAn database, you can download by the following command: \"metaphlan --install --bowtie2db <database folder>\".",
                    "format": "directory-path"
                },
                "mpa_index": {
                    "type": "string",
                    "description": "Specify the id of MetaPhlAn database version to use",
                    "fa_icon": "fas fa-align-center",
                    "default": "mpa_vJan21_CHOCOPhlAnSGB_202103"
                },
                "sgb2gtdb_index": {
                    "type": "string",
                    "description": "Specify the prefix of MetaPhlAn PKL database to use",
                    "fa_icon": "fas fa-align-center",
                    "default": "mpa_vJan21_CHOCOPhlAnSGB_202103_SGB"
                },
                "mpa_options": {
                    "type": "string",
                    "default": "--input_type fastq --read_min_len 50 --add_viruses -t rel_ab",
                    "description": "Options for MetaPhlAn",
                    "fa_icon": "fas fa-filter"
                },
                "mpa_extra_abun_method": {
                    "type": "string",
                    "description": "Extra methods to run MetaPhlAn",
                    "fa_icon": "fas fa-filter"
                },
                "save_metaphlan_output": {
                    "type": "boolean",
                    "default": true,
                    "description": "Save results of the metaphlan analysis for each sample or not"
                },
                "kraken2": {
                    "type": "boolean",
                    "description": "Run Kraken2 or not",
                    "fa_icon": "fas fa-record-vinyl"
                },
                "kraken2_db": {
                    "type": "string",
                    "fa_icon": "far fa-folder-open",
                    "description": "Path to Kraken2 database",
                    "help_text": "To create the standard Kraken 2 database, you can use the following command:\nkraken2-build --standard --db $DBNAME",
                    "format": "directory-path"
                },
                "kraken2_options": {
                    "type": "string",
                    "description": "Options for Kraken2",
                    "fa_icon": "fas fa-filter"
                },
                "bracken_options": {
                    "type": "string",
                    "default": "-r 150 -t 1 ",
                    "description": "Options for Bracken",
                    "fa_icon": "fas fa-filter"
                },
                "save_kraken2_output": {
                    "type": "boolean",
                    "default": true,
                    "description": "Save results of the Kraken2 analysis for each sample or not"
                },
                "humann": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run HUMAnN or not",
                    "fa_icon": "fas fa-record-vinyl"
                },
                "humann_version": {
                    "type": "string",
                    "default": "3",
                    "description": "The version of HUMAnN",
                    "enum": [
                        "3",
                        "4"
                    ]
                },
                "humann_chocophlan_db": {
                    "type": "string",
                    "description": "Directory containing the nucleotide database",
                    "help_text": "you can download like this: \"humann_databases --download chocophlan full $INSTALL_LOCATION\"",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_protein_db": {
                    "type": "string",
                    "description": "Directory containing the protein database",
                    "help_text": "you can download like this: \"humann_databases --download uniref uniref90_diamond $INSTALL_LOCATION\".",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_map_db": {
                    "type": "string",
                    "description": "Directory containing the humann utility mapping other database ID file",
                    "help_text": "humann full mapping file, you can download them like this:\" humann_databases --download utility_mapping full $INSTALL_LOCATION\".",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_search_mode": {
                    "type": "string",
                    "default": "uniref90",
                    "description": "Search for uniref50 or uniref90 gene families",
                    "fa_icon": "fas fa-search"
                },
                "humann_options": {
                    "type": "string",
                    "default": "--remove-temp-output --remove-column-description-output",
                    "description": "Options for HUMAnN",
                    "fa_icon": "fas fa-filter"
                },
                "humann_regroup_table_options": {
                    "type": "string",
                    "default": "-e 14",
                    "description": "Options for HUMAnN regroup",
                    "fa_icon": "fas fa-filter"
                },
                "humann_map_CARD": {
                    "type": "string",
                    "description": "Path to mapping file of HUMAnNdatabase and CARD database",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_map_CAZy": {
                    "type": "string",
                    "description": "Path to mapping file of HUMAnNdatabase and CAZy database",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_map_VFDB": {
                    "type": "string",
                    "description": "Path to mapping file of HUMAnN database and VFDB database",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "humann_map_GMMs": {
                    "type": "string",
                    "description": "Path to mapping file of HUMAnN database and GMMs database",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "ko_module": {
                    "type": "string",
                    "description": "Path to mapping file of ko and module",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "ko_pathway": {
                    "type": "string",
                    "description": "Path to mapping file of ko and pathway",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "save_humann_output": {
                    "type": "boolean",
                    "default": true,
                    "description": "Save results of the HUMAnN analysis for each sample or not"
                }
            },
            "fa_icon": "fas fa-bookmark"
        },
        "geneset_options": {
            "title": "Geneset options",
            "type": "object",
            "description": "Parameters of geneset module",
            "default": "",
            "properties": {
                "prodigal_options": {
                    "type": "string",
                    "default": "-p meta",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for Prodigal"
                },
                "prodigal_output": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "description": "The prodigal output includes predicted protein and nucleic acid information. This parameter configures a CSV file that must include the following columns: id, faa, cds",
                    "help_text": "This parameter configures a CSV file that must include the following columns: id, faa, cds."
                },
                "geneset_construction": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable gene set construction analysis"
                },
                "gene_min_length": {
                    "type": "integer",
                    "default": 150,
                    "description": "Gene min length",
                    "fa_icon": "fas fa-compress-alt"
                },
                "cdhit_options": {
                    "type": "string",
                    "default": "-c 0.95 -aS 0.9 -n 10 -M 0 -d 0",
                    "description": "Options for CD-HIT",
                    "fa_icon": "fas fa-filter"
                },
                "cdhit_split_run_eachthread": {
                    "type": "integer",
                    "default": 16,
                    "description": "Thread of  each cd-hit split task",
                    "fa_icon": "fas fa-bars"
                },
                "cdhit_split_run_threshold": {
                    "type": "integer",
                    "default": 1000000,
                    "description": "Threshold of split run cd-hit",
                    "fa_icon": "fas fa-columns"
                },
                "cdhit_geneset_chunk_size": {
                    "type": "integer",
                    "default": 500000,
                    "description": "Gene count of each cd-hit split task",
                    "fa_icon": "fas fa-columns"
                },
                "gene_function": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable gene function analysis"
                },
                "eggnog_protein_chunk_size": {
                    "type": "integer",
                    "default": 10000,
                    "description": "Number of protein sequences in each eggNOG task",
                    "fa_icon": "fas fa-compress-alt"
                },
                "eggnog_diamond_db": {
                    "type": "string",
                    "description": "Path to DIAMOND-compatible database for eggNOG-mapper",
                    "fa_icon": "fas fa-database",
                    "help_text": "You can execute the following command to get the database files.\ncreate_dbs.py -m diamond --dbname bacteria --taxa Bacteria --data_dir /path/to/eggnog databse/ -y",
                    "format": "file-path"
                },
                "eggnog_mapper_db": {
                    "type": "string",
                    "description": "Path to eggNOG-mapper database",
                    "fa_icon": "fas fa-database",
                    "help_text": "You can execute the following command to download the database.\ndownload_eggnog_data.py --data_dir /path/to/eggnog emapperdb -y ",
                    "format": "directory-path"
                },
                "eggnog_options": {
                    "type": "string",
                    "default": "--itype proteins -m diamond",
                    "description": "Options for eggNOG-mapper",
                    "fa_icon": "fas fa-filter"
                },
                "geneset_profile_bowtie2_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for Bowtie 2 to get geneset profile"
                },
                "VFDB_db": {
                    "type": "string",
                    "description": "Path to VFDB protein database",
                    "format": "file-path",
                    "fa_icon": "fas fa-database"
                },
                "CARD_db": {
                    "type": "string",
                    "description": "Path to CARD database for RGI",
                    "fa_icon": "fas fa-database",
                    "help_text": "Download and build the latest AMR reference data from CARD, reference the GitHub link: https://github.com/arpcard/rgi#installation",
                    "format": "directory-path"
                },
                "rgi_load_options": {
                    "type": "string",
                    "default": "--debug --kmer_size 61",
                    "description": "Options for RGI to load CARD database, annotations and k-mer database",
                    "fa_icon": "fas fa-filter"
                },
                "rgi_main_options": {
                    "type": "string",
                    "default": "--input_type protein --alignment_tool DIAMOND --clean --include_nudge",
                    "description": "Options for RGI to run rgi application",
                    "fa_icon": "fas fa-filter"
                },
                "bigspace_path": {
                    "type": "string",
                    "description": "Name of the path to bigscape.py",
                    "fa_icon": "far fa-folder-open"
                },
                "bigspace_db": {
                    "type": "string",
                    "description": "Path to pfam file locations for BiG-MAP",
                    "fa_icon": "fas fa-database",
                    "help_text": "To run BiG-SCAPE, you will also need to have the latest (processed) Pfam database Pfam-A.hmm.gz available from the Pfam FTP website (https://pfam.xfam.org/). Once the Pfam-A.hmm.gz file is downloaded, uncompress it and process it using the hmmpress command from the HMMER suit (http://hmmer.org/).",
                    "format": "directory-path"
                },
                "antismash_options": {
                    "type": "string",
                    "default": "--genefinding-tool prodigal-m --minlength 2000",
                    "description": "Options for antiSMASH",
                    "fa_icon": "fas fa-filter"
                },
                "bigmap_family_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for BiG-MAP.family.py"
                },
                "bigmap_map_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for BiG-MAP.map.py"
                },
                "ntDB_name": {
                    "type": "string",
                    "default": "ntDB",
                    "fa_icon": "fas fa-file-signature",
                    "description": "Name of custom nucleotide database"
                },
                "nucleotide_db": {
                    "type": "string",
                    "description": "Custom Nucleotide Reference Database",
                    "help_text": "A custom nucleotide reference database can be provided to custom_nucleotide_DB.nf. This custom database must include nucleotide FASTA sequences and must be formatted in a way that can be used by Bowtie2.",
                    "fa_icon": "fas fa-database",
                    "format": "file-path"
                },
                "ntDB_bowtie2_options": {
                    "type": "string",
                    "default": "--sensitive",
                    "description": "Options for Bowtie 2 to use custom nucleotide database to get gene functional annotation",
                    "fa_icon": "fas fa-filter"
                },
                "proDB_name": {
                    "type": "string",
                    "default": "proDB",
                    "fa_icon": "fas fa-file-signature",
                    "description": "Name of custom protein database"
                },
                "protein_db": {
                    "type": "string",
                    "description": "Custom Protein Reference Database",
                    "help_text": "A custom protein reference database can be provided to custom_protein_DB.nf. This custom database must include protein FASTA sequences and must be formatted in a way that can be used by Diamond.",
                    "fa_icon": "fas fa-database",
                    "format": "file-path"
                },
                "proDB_diamond_options": {
                    "type": "string",
                    "default": "-e 1e-5 --id 40",
                    "description": "Options for DIAMOND to use custom protein database to get gene functional annotation",
                    "fa_icon": "fas fa-filter"
                },
                "gene_abundance_calculation": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable gene abundance calculation analysis"
                },
                "save_geneset_abundance": {
                    "type": "boolean",
                    "default": true,
                    "description": "Save results of the geneset abundance for each sample or not"
                }
            },
            "fa_icon": "fas fa-dna"
        },
        "binning_options": {
            "title": "Binning options",
            "type": "object",
            "description": "Parameters of binning module",
            "default": "",
            "properties": {
                "skip_binning": {
                    "type": "boolean",
                    "description": "Skip binning module",
                    "help_text": "skip the BINNING step",
                    "fa_icon": "fas fa-forward"
                },
                "metabat2": {
                    "type": "boolean",
                    "description": "Run MetaBAT2 or not",
                    "fa_icon": "fas fa-cube",
                    "default": true
                },
                "metabat2_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for MetaBAT2",
                    "default": "--seed 1"
                },
                "concoct": {
                    "type": "boolean",
                    "description": "Run CONCOCT or not",
                    "fa_icon": "fas fa-cube",
                    "default": true
                },
                "concoct_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for CONCOCT"
                },
                "semibin2": {
                    "type": "boolean",
                    "description": "Run SemiBin or not",
                    "fa_icon": "fas fa-cube",
                    "default": true
                },
                "semibin2_options": {
                    "type": "string",
                    "default": "--orf-finder prodigal --tmpdir tmp/ --environment global -m 2000 --compression none",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for SemiBin"
                },
                "maxbin2": {
                    "type": "boolean",
                    "description": "Run Maxbin2 or not",
                    "fa_icon": "fas fa-cube"
                },
                "maxbin2_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for Maxbin2"
                },
                "metabinner": {
                    "type": "boolean",
                    "description": "Run MetaBinner or not",
                    "fa_icon": "fas fa-cube",
                    "default": true
                },
                "metabinner_path": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Path of MetaBinner"
                },
                "metabinner_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for MetaBinner"
                },
                "binny": {
                    "type": "boolean",
                    "description": "Run binny or not",
                    "fa_icon": "fas fa-cube"
                },
                "binny_path": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Path of binny"
                },
                "binny_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for binny"
                },
                "comebin": {
                    "type": "boolean",
                    "description": "Run COMEBin or not",
                    "fa_icon": "fas fa-boxes"
                },
                "comebin_options": {
                    "type": "string",
                    "description": "Options for COMEBin",
                    "fa_icon": "fas fa-filter"
                },
                "binning_bowtie2_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for Bowtie 2 to run binning software like MetaBAT2, CONCOCT, MetaBinner, SemiBin, binny"
                },
                "dastool_options": {
                    "type": "string",
                    "default": "--write_bin_evals --write_bins",
                    "description": "Options for  DAS Tool",
                    "fa_icon": "fas fa-filter"
                },
                "checkm2_db": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Provide a location for the CheckM2 database for a given predict run",
                    "help_text": "You can execute the following command to get the database files.\ncheckm2 database --download --path /path/to/CheckM2 database",
                    "format": "file-path"
                },
                "completeness": {
                    "type": "integer",
                    "default": 50,
                    "description": "Minimum completeness",
                    "fa_icon": "fas fa-compress-alt",
                    "help_text": "The mininum requirement for completeness, default > 50(%)"
                },
                "contamination": {
                    "type": "integer",
                    "default": 10,
                    "description": "Maximum contamination",
                    "fa_icon": "fab fa-maxcdn",
                    "help_text": "The maximum requirement for contamination, default < 5(%) "
                },
                "QS": {
                    "type": "integer",
                    "default": 40,
                    "fa_icon": "fas fa-equals",
                    "help_text": "QS = completeness - 5 * contamination, default > 50(%)",
                    "description": "Quality standard of bins"
                },
                "checkm2_options": {
                    "type": "string",
                    "default": "-x fa",
                    "description": "Options for CheckM2",
                    "fa_icon": "fas fa-filter"
                },
                "drep_bin_chunk_size": {
                    "type": "integer",
                    "default": 200,
                    "description": "Number of genomes in each drep piece",
                    "fa_icon": "fas fa-compress-alt"
                },
                "drep_split_run_threshold": {
                    "type": "integer",
                    "default": 800,
                    "description": "When the number of input fasta files is less than this parameter, drep task splitting will not be performed",
                    "fa_icon": "fas fa-compress-alt"
                },
                "drep_split_thread": {
                    "type": "integer",
                    "description": "Number of threads for each job",
                    "fa_icon": "fas fa-server"
                },
                "drep_split_mem": {
                    "type": "integer",
                    "description": "Max memory required for each job, Suffix with G",
                    "fa_icon": "fas fa-sd-card"
                },
                "drep_options": {
                    "type": "string",
                    "default": "-sa 0.95 -nc 0.3 --ignoreGenomeQuality",
                    "description": "Options for dRep",
                    "fa_icon": "fas fa-filter"
                },
                "PermutationBinOptimizer": {
                    "type": "boolean",
                    "description": "Set permutation-based Bin Optimizer or not"
                },
                "similarity_ratio": {
                    "type": "number",
                    "default": 0.8,
                    "description": "Similarity bins threshold"
                },
                "rawbin_info": {
                    "type": "string",
                    "help_text": "This parameter configures a CSV file that must include the following columns: id,rawbin_folder,quality_report.",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "description": "Path to raw bin  information includes the raw bin folder and the quality report. This parameter configures a CSV file that must include the following columns: id,rawbin_folder,quality_report."
                },
                "HQ_unique_bins": {
                    "type": "string",
                    "description": "Path to all high-quality unique bins, and the file extension for these bins in the directory should be .fa."
                },
                "bin_taxonomy": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run bin taxonomy or not",
                    "fa_icon": "fas fa-toggle-on"
                },
                "gtdbtk_db": {
                    "type": "string",
                    "description": "Path to GTDB-Tk database",
                    "help_text": "wget https://data.gtdb.ecogenomic.org/releases/latest/auxillary_files/gtdbtk_data.tar.gz\nor\nwget https://data.ace.uq.edu.au/public/gtdb/data/releases/latest/auxillary_files/gtdbtk_data.tar.gz\ntar xvzf gtdbtk_data.tar.gz",
                    "format": "directory-path",
                    "fa_icon": "fas fa-database"
                },
                "mash_db": {
                    "type": "string",
                    "description": "Path to save/read (if exists) the Mash reference sketch database (.msh)  for GTDB-Tk",
                    "fa_icon": "fas fa-database",
                    "help_text": "\nPlease refer the following command to build mash database:\nmkdir /path/to/gtdbtk_db\ncd /path/to/gtdbtk_db\nwget https://data.gtdb.ecogenomic.org/releases/latest/auxillary_files/gtdbtk_data.tar.gz\nwget https://data.ace.uq.edu.au/public/gtdb/data/releases/latest/auxillary_files/gtdbtk_data.tar.gz\ntar xvzf gtdbtk_data.tar.gz\n\nperl -alne 'print \"/path/to/gtdbtk_db/fastani/$F[1]$F[0]\";' /path/to/gtdbtk_db/fastani/genome_paths.tsv > tmp.txt\nmash sketch -l -p 16 tmp.txt -o gtdb_ref_sketch.msh -k 16 -s 5000",
                    "format": "directory-path"
                },
                "gtdb_bin_chunk_size": {
                    "type": "integer",
                    "default": 500,
                    "description": "Max number of bins in each gtdb task",
                    "fa_icon": "fas fa-compress-alt"
                },
                "gtdb_archaeal_metadata": {
                    "type": "string",
                    "description": "GTDB archaeal metadata file",
                    "help_text": "Download link: https://data.ace.uq.edu.au/public/gtdb/data/releases/latest/ar53_metadata.tsv.gz",
                    "format": "file-path",
                    "fa_icon": "fas fa-file"
                },
                "gtdb_bacterial_metadata": {
                    "type": "string",
                    "description": "GTDB bacterial metadata file",
                    "help_text": "Download link: https://data.ace.uq.edu.au/public/gtdb/data/releases/latest/bac120_metadata.tsv.gz",
                    "format": "file-path",
                    "fa_icon": "fas fa-file"
                },
                "gtdbtk_classify_wf_options": {
                    "type": "string",
                    "default": "--extension fa --pplacer_cpus 1 --scratch_dir ./",
                    "description": "Options for GTDB-Tk to run classify workflow",
                    "fa_icon": "fas fa-filter"
                },
                "gtdbtk_identify_options": {
                    "type": "string",
                    "default": "--extension fa",
                    "description": "Options for GTDB-Tk to identify marker genes in genome(s)",
                    "fa_icon": "fas fa-filter"
                },
                "gtdbtk_align_options": {
                    "type": "string",
                    "description": "Options for GTDB-Tk to create a multiple sequence alignment based on the AR53/BAC120 marker set",
                    "fa_icon": "fas fa-filter"
                },
                "gtdbtk_infer_options": {
                    "type": "string",
                    "description": "Options for GTDB-Tk to infer tree from multiple sequence alignment",
                    "fa_icon": "fas fa-filter"
                },
                "bin_function": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run bin functional annotation or not",
                    "fa_icon": "fas fa-toggle-on"
                },
                "emapper_annotation": {
                    "type": "string",
                    "fa_icon": "fas fa-file-alt",
                    "description": "Path to geneset annotation result file",
                    "help_text": "The parameter is output file of genest module, you cat set to ${outdir}/03.Geneset/032.Annotation/${pipeline_prefix}_geneset_function_emapper_org_annotation.xls, please replace ${outdir} and ${pipeline_prefix} with the value you have configured.\n\nNotes: This parameter is only valid when the mode is  5 !"
                },
                "gene_info": {
                    "type": "string",
                    "description": "Path to gene information file",
                    "fa_icon": "fas fa-file-alt",
                    "help_text": "The parameter is output file of genest module, you cat set to ${outdir}/03.Geneset/031.Fasta/${pipeline_prefix}_geneset_gene.info.xls, please replace ${outdir} and ${pipeline_prefix} with the value you have configured.\n\nNotes: This parameter is only valid when the mode is  5 !"
                },
                "cdhit_clstr": {
                    "type": "string",
                    "fa_icon": "fas fa-file-alt",
                    "description": "Path to cluster list file",
                    "help_text": "The parameter is output file of genest module, you cat set to ${outdir}/03.Geneset/031.Fasta/${pipeline_prefix}_geneset_cdhit_clstr.txt, please replace ${outdir} and ${pipeline_prefix} with the value you have configured.\n\nNotes: This parameter is only valid when the mode is  5 !"
                },
                "vfdb_annotation": {
                    "type": "string",
                    "description": "Path to VFDB database annotation result file"
                },
                "card_annotation": {
                    "type": "string",
                    "description": "Path to CARD database annotation result file"
                },
                "kegg_db_category": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/db/ko_category.txt",
                    "description": "Category information of KEGG database",
                    "fa_icon": "fas fa-file-alt",
                    "format": "file-path"
                },
                "go_db_category": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/db/GO_ontology.txt",
                    "description": "Category information of GO database",
                    "fa_icon": "fas fa-file-alt",
                    "format": "file-path"
                },
                "cazy_db_category": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/db/cazy_category.txt",
                    "description": "Category information of CAZy database",
                    "fa_icon": "fas fa-file-alt",
                    "format": "file-path"
                },
                "cog_db_category": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/db/cog_level.txt",
                    "description": "Category information of COG database",
                    "fa_icon": "fas fa-file-alt",
                    "format": "file-path"
                },
                "bin_abundance_calculation": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run bin abundance calculation or not",
                    "fa_icon": "fas fa-laptop-code"
                },
                "binset_profile_bowtie2_options": {
                    "type": "string",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for Bowtie 2 to get binset profile"
                },
                "coverm_options": {
                    "type": "string",
                    "default": "-x fa --min-covered-fraction 0",
                    "description": "Options for CoverM",
                    "fa_icon": "fas fa-filter"
                },
                "method4coverm": {
                    "type": "string",
                    "default": "relative_abundance,trimmed_mean,count",
                    "description": "Methods to run CoverM",
                    "fa_icon": "fas fa-map-signs"
                },
                "bin_refine": {
                    "type": "boolean",
                    "fa_icon": "fas fa-toggle-off",
                    "description": "Run binning refinement or not"
                },
                "genome_paths": {
                    "type": "string",
                    "description": "Genome path file of  GTDB-Tk",
                    "fa_icon": "fas fa-file-alt"
                },
                "refine_bin_options": {
                    "type": "string",
                    "default": "-a 50 -A 90 -b 1 -B 10",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for selecting bin to refine"
                },
                "deepurify_db": {
                    "type": "string",
                    "fa_icon": "fas fa-database",
                    "description": "Path to deepurify database"
                },
                "deepurify_module": {
                    "type": "string",
                    "default": "clean",
                    "fa_icon": "fas fa-map-signs",
                    "description": "Mode to run deepurify",
                    "enum": [
                        "clean",
                        "rebin"
                    ]
                },
                "deepurify_clean_options": {
                    "type": "string",
                    "default": "--bin_suffix fa --gpu_num 0 --each_gpu_threads 1 --temp_output_folder ./tmp/",
                    "fa_icon": "fas fa-filter",
                    "description": "Options to run deepurify clean"
                },
                "deepurify_rebin_options": {
                    "type": "string",
                    "default": "--gpu_num 0 --each_gpu_threads 1 --temp_output_folder ./tmp/",
                    "fa_icon": "fas fa-filter",
                    "description": "Options to run deepurify rebin"
                },
                "cobra_options": {
                    "type": "string",
                    "default": "-mink 21 -maxk 127 -lm 3",
                    "fa_icon": "fas fa-filter",
                    "description": "Options for cobra"
                },
                "max_dist_threshold": {
                    "type": "number",
                    "default": 0.2,
                    "description": "Maximum distance threshold to filter unclosed samples"
                },
                "min_quality_score": {
                    "type": "integer",
                    "default": 50,
                    "description": "Minimum bin quality score to be selected"
                },
                "preprocess_bin_assembly_options": {
                    "type": "string",
                    "default": "--use_single_sample --max_dist_threshold 0.2",
                    "description": "Options of script : preprocess_bin_assembly.py"
                },
                "bin_reassembly": {
                    "type": "boolean",
                    "fa_icon": "fas fa-toggle-off",
                    "description": "Run binning reassembly or not"
                },
                "reassembly_min_contig_len": {
                    "type": "integer",
                    "default": 2000,
                    "description": "Minimum length of contigs to reassembly"
                },
                "reassembly_HQ_options": {
                    "type": "string",
                    "default": "--completeness 90 --contamination 5",
                    "description": "Detail parameters see 'bin/bra_get_reassembly_bin_sample.py'",
                    "help_text": "Detail parameters see 'bin/bra_get_reassembly_bin_sample.py'"
                },
                "get_bin_assembly_options": {
                    "type": "string",
                    "default": "--minCompleteness 90 --minContamination 5 --minQS 65 --minCount 10000 --minDepth 1",
                    "description": "Detailed parameters see 'bin/bra_pick_HQ_reassembly_bin_checkm2.py'",
                    "help_text": "Detailed parameters see 'bin/bra_pick_HQ_reassembly_bin_checkm2.py'"
                },
                "extract_bin_reads_options": {
                    "type": "string",
                    "default": "--max_dist_threshold 0.2 --topSampleNum 10",
                    "help_text": "Detailed parameters see 'bin/bra_preprocess_bin_assembly.py'",
                    "description": "Detailed parameters see 'bin/bra_preprocess_bin_assembly.py'"
                },
                "bin_min_abundance": {
                    "type": "number",
                    "default": 0.0001,
                    "description": "Minimum bin relative abundance threshold"
                },
                "bin_min_popularity": {
                    "type": "number",
                    "default": 0.001,
                    "description": "Reassembly bin is only performed if bin_present(bin_abundance > --abundance) > --present"
                },
                "remove_samples": {
                    "type": "string",
                    "description": "A list of samples to be removed"
                },
                "hybridSPAdes_options": {
                    "type": "string",
                    "default": "--meta --only-assembler",
                    "description": "Options of hybridSPAdes"
                },
                "vamb": {
                    "type": "boolean",
                    "description": "Run VAMB binning tool"
                },
                "vamb_options": {
                    "type": "string",
                    "default": " -m 2000 --minfasta 10000 ",
                    "description": "Options of VAMB"
                },
                "metadecoder": {
                    "type": "boolean",
                    "default": true,
                    "description": "Run MetaDecoder or not"
                },
                "metadecoder_options": {
                    "type": "string",
                    "default": " --min_sequence_length 2000  ",
                    "description": "Options of MetaDecoder"
                },
                "taxvamb": {
                    "type": "boolean",
                    "description": "Run TaxVamb taxonomic binning"
                },
                "taxvamb_options": {
                    "type": "string",
                    "default": " -m 2000 --minfasta 10000 ",
                    "description": "Options of TaxVamb"
                },
                "magscot_folder": {
                    "type": "string",
                    "description": "Installation directory of MAGScoT binning toolkit"
                },
                "magscot_options": {
                    "type": "string",
                    "description": "Custom MAGScoT parameters"
                },
                "galah_options": {
                    "type": "string",
                    "default": "--min-completeness 50  --max-contamination 10 ",
                    "description": "Options of galah"
                },
                "ScoreBasedOptimizer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Activate score-based bin optimization - DAS Tool"
                },
                "ContigTaxonomyOptimizer": {
                    "type": "boolean",
                    "description": "Run taxonomy-guided bin optimization"
                },
                "binner_integrator": {
                    "type": "string",
                    "default": "dastool",
                    "description": "Specify the tool for binning integration framework",
                    "enum": [
                        "dastool",
                        "magscot"
                    ]
                }
            },
            "fa_icon": "fas fa-chalkboard"
        },
        "minitools_options": {
            "title": "Minitools options",
            "type": "object",
            "default": "",
            "properties": {
                "contig2bin": {
                    "type": "string",
                    "description": "Mapping file of contig to bin"
                },
                "protein_list": {
                    "type": "string",
                    "description": "Protein list file"
                },
                "contig_list": {
                    "type": "string",
                    "description": "Contig fa list"
                },
                "bin_QS_taxonomy": {
                    "type": "string",
                    "description": "Path to file: bin_QS_taxonomy_summary.xls"
                },
                "bins_count_abun": {
                    "type": "string",
                    "description": "Output file to run CoverM with parameter \"-m count\""
                },
                "bins_mean_abun": {
                    "type": "string",
                    "description": "Output file to run CoverM with parameter \"-m mean\""
                },
                "bin_genome_floder": {
                    "type": "string",
                    "description": "Folder containing  bin fa files"
                }
            },
            "description": "Parameters of minitools"
        },
        "report_options": {
            "title": "Report Options",
            "type": "object",
            "description": "Parameters to generate the html report of the pipeline",
            "default": "",
            "properties": {
                "report_topic": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/assets/report/topic.txt",
                    "description": "Path to topic information file"
                },
                "report_order": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/assets/report/report.order.txt",
                    "description": "Path to figure order file"
                },
                "report_template": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/assets/report/template_V20240307.html",
                    "description": "Path to HTML template file"
                },
                "report_images": {
                    "type": "string",
                    "default": "/aimigene/yangying/pipeline/nf-core-metaflowx-public/assets/report/img",
                    "description": "Path to images of HTML template"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fas fa-desktop",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 32,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "126.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "schema_ignore_params": {
                    "type": "string",
                    "default": "genomes",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/qc_options"
        },
        {
            "$ref": "#/definitions/assembly_options"
        },
        {
            "$ref": "#/definitions/marker_options"
        },
        {
            "$ref": "#/definitions/geneset_options"
        },
        {
            "$ref": "#/definitions/binning_options"
        },
        {
            "$ref": "#/definitions/minitools_options"
        },
        {
            "$ref": "#/definitions/report_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}